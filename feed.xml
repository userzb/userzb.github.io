<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://userzb.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://userzb.github.io/" rel="alternate" type="text/html" /><updated>2021-01-05T20:39:19+08:00</updated><id>https://userzb.github.io/feed.xml</id><title type="html">userzb’s blog</title><subtitle>记录、分享。</subtitle><entry><title type="html">Fabric Ledger翻译_个人小结</title><link href="https://userzb.github.io/blockchain/2021/01/05/Fabric-Ledger%E7%BF%BB%E8%AF%91_%E4%B8%AA%E4%BA%BA%E5%B0%8F%E7%BB%93.html" rel="alternate" type="text/html" title="Fabric Ledger翻译_个人小结" /><published>2021-01-05T00:00:00+08:00</published><updated>2021-01-05T00:00:00+08:00</updated><id>https://userzb.github.io/blockchain/2021/01/05/Fabric%20Ledger%E7%BF%BB%E8%AF%91_%E4%B8%AA%E4%BA%BA%E5%B0%8F%E7%BB%93</id><content type="html" xml:base="https://userzb.github.io/blockchain/2021/01/05/Fabric-Ledger%E7%BF%BB%E8%AF%91_%E4%B8%AA%E4%BA%BA%E5%B0%8F%E7%BB%93.html">&lt;p&gt;参考链接：https://hyperledger-fabric.readthedocs.io/en/release-1.4/ledger/ledger.html&lt;/p&gt;

&lt;p&gt;备注：&lt;/p&gt;

&lt;p&gt;Facts：真实情况&lt;/p&gt;

&lt;p&gt;State：状态&lt;/p&gt;

&lt;p&gt;Ledger：账本&lt;/p&gt;

&lt;p&gt;Endorsement(背书)：背书是指持票人为将票据权利转让给他人或者将一定的票据权利授予他人行使，而在票据背面或者粘单上记载有关事项并签章的行为。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/背书/5605616?fr=aladdin&quot;&gt;https://baike.baidu.com/item/%E8%83%8C%E4%B9%A6/5605616?fr=aladdin&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;什么是账本&quot;&gt;什么是账本？&lt;/h2&gt;
&lt;p&gt;账本包含了当前业务的状态，一般地我们把账本看成是交易日志。最早的欧洲和中国账本可追溯到1000年前，苏美尔人的石刻账本则已有4000年历史。现在，我们以为最新的账本为例来展开我们对账本的讨论。&lt;/p&gt;

&lt;p&gt;银行账户就是讨论账本的最好例子。在这个场景中，我们会关注两个点：（1）当前可用余额，因为它表示我们当前可以花费的金额。（2）当前可用余额是怎么形成，一般地我们是通过查阅过往交易的收入和支出。
这是一个关于账本的现实生活例子，一个状态（银行余额），以及一系列有序的交易（收入和支出信息）。
Fabric受到以上两个方面的启发，去表示当前账本状态的值，以及去捕获形成当前账本状态的历史交易日志。&lt;/p&gt;

&lt;h2 id=&quot;账本ledger真实情况facts状态state&quot;&gt;账本Ledger，真实情况Facts，状态State&lt;/h2&gt;
&lt;p&gt;一个账本不单单是书面上把业务对象给保存下来，而且把这个业务对象相对应的真实情况给保存下来。
当我们说我们把业务对象保存到了账本上的时候，其实就是说我们把这个业务对象&lt;strong&gt;当前状态&lt;/strong&gt;和产生当前状态的&lt;strong&gt;历史交易&lt;/strong&gt;这些真实情况给记录下来。
在极速增长的数字世界中（宏观上），我们关注的是对象本身而不是对象反映的真实情况。
但在讨论对象本身时（微观上），它看起来像生活在一个外部数据存储中，因为这个对象反映的真实情况都保存在账本上，而账本允许我们找到这个对象所记录的位置以及与这个对象相关的信息。&lt;/p&gt;

&lt;p&gt;当业务对象的当前状态可以改变的时候，其历史所反映的真实情况是不可纂改的，它能被添加新状态，但是不能回溯去修改就状态。下面我们将看看区块链是入到做到保证历史的真实情况是不可以修改的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;账本可保存多个业务对象，而业务对象的真实情况通过历史交易（日志）来反映的，其反应的值我们用状态来表示。&lt;/p&gt;

&lt;p&gt;历史交易（日志）不可纂改，所以历史交易（日志）产生的状态也不可修改，但是我们可以通过添加交易来改变这个状态。&lt;/p&gt;

&lt;h2 id=&quot;fabric账本&quot;&gt;Fabric账本&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blockchain/2021-01-05-Fabric Ledger翻译_个人小结/ledger.diagram.1.png&quot; alt=&quot;ledger.ledger&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在Fabric中，账本由两部分组成，分别为历史状态和区块链。账本表示一组业务对象的真实情况。&lt;/p&gt;

&lt;p&gt;世界状态。它是一个数据库，可看作是反映账本状态当前值的缓存。世界状态使程序可以轻松地直接访问状态的当前值，而不必通过遍历整个交易日志进行计算。 默认情况下，账本状态表示为键值对（key-value）。世界状态可以频繁更改，因为它可以创建，更新和删除状态。&lt;/p&gt;

&lt;p&gt;区块链。记录所有引发当前世界状态发生的更改的交易日志。 交易收集到一个区块中，并把区块附加到区块链的尾部，使我们能够了解引发当前世界状态变化的历史。 区块链数据结构与世界状态非常不同，因为一旦写入，就无法修改； 它是不可纂改的。&lt;/p&gt;

&lt;p&gt;我们必须树立起这么一个观点，就是在Fabric的网络中，逻辑上只有一份账本，但是物理上这份账本保存在多个节点上，而维护这份逻辑账本，保证物理账本一致性的过程我们称之为&lt;strong&gt;共识&lt;/strong&gt;。分布式账本技术（DLT）经常被关联到逻辑上一个，物理上多个账本中。&lt;/p&gt;

&lt;h2 id=&quot;世界状态&quot;&gt;世界状态&lt;/h2&gt;

&lt;p&gt;世界状态将业务对象的属性的当前值保留为唯一的账本状态。 因为程序通常需要业务对象的当前值，而遍历整个区块链来计算业务对象的当前值将很麻烦而且效率很低，所以世界状态的设计使得访问对象当前值变得很便捷。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blockchain/2021-01-05-Fabric Ledger翻译_个人小结/ledger.diagram.2.png&quot; alt=&quot;ledger.worldstate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一个账本状态记录着一系列有关业务实体的真实情况。上图展示了关于两部车的账本状态，CAR1和CAR2，它们都由key value组成的。一个应用程序通过调用智能合约来操作账本的状态，其操作为访问账本的API来get、put和delete状态。&lt;/p&gt;

&lt;p&gt;世界状态通常使用数据库来实现。因为数据库提供了丰富的操作以支撑数据的存储和数据的检索。Fabric提供了切换不同数据库的机制以提供复杂的查询。&lt;/p&gt;

&lt;p&gt;应用程序提交将会对世界状态产生影响的交易，这些交易最终会被提交到账本的区块链中。应用将会被SDK隔离，从而不需要了解共识机制的细节；他们仅仅需要调用智能合约，以及当交易被区块链包含时收到通知。这个设计的关键点是只有交易被指定的背书机构签名了，这条交易才会更新世界状态。如果交易没有被足够多的背书节点签名，那么它将不会改变世界状态。&lt;/p&gt;

&lt;p&gt;每个状态都有一个版本号。目的是确保状态和预期的改变一样，没有并发的更新。（有点像MySQL的MVCC机制，乐观锁）&lt;/p&gt;

&lt;p&gt;最后，一旦账本被创建，它的世界状态是空的。因为任何一个有效、可改变世界状态的交易都是保存在区块链上的，这意味这世界状态能够在任何时间段通过区块链来重新生成。&lt;/p&gt;

&lt;p&gt;如果一个peer节点非异常宕机了，那么世界状态可以在peer节点重启时重新生成，而下一条交易将会在peer节点完成世界状态的生成后被接受。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;（1）世界状态保存当前账本中业务对象的值。&lt;/p&gt;

&lt;p&gt;（2）世界状态通过数据库技术来实现的，可把它看作是一个缓存，因为它用于提升检索某个业务对象的当前状态值的速度。&lt;/p&gt;

&lt;p&gt;（3）世界状态的操作有get、put和delete。&lt;/p&gt;

&lt;p&gt;（4）目前的世界状态都是用键值对表示，并为每个键值对添加版本号，用来控制并发。&lt;/p&gt;

&lt;p&gt;（5）世界状态不是Fabric账本必需的元素。&lt;/p&gt;

&lt;h2 id=&quot;blockchain&quot;&gt;Blockchain&lt;/h2&gt;

&lt;p&gt;尽管世界状态包含了一系列跟当前业务对象当前状态相关的真实情况，区块链记录的是这些真实情况是如何从历史的真实情况迁移的。区块链记录着（1）账本的历史状态；（2）账本历史状态的改变过程。&lt;/p&gt;

&lt;p&gt;区块链被构造为互连区块的顺序日志，其中每个区块包含一系列交易，每个交易代表对世界状态的查询或更新。 交易排序的机制在其他地方讨论； 重要的是，在Orderer节点创建区块时，就建立了区块的排序以及区块内的交易排序。&lt;/p&gt;

&lt;p&gt;每个区块头部包含了（1）当前区块交易的哈希值；（2）上一个区块的区块头哈希。这种哈希和连接的方式使得账本数据非常安全。通过上面的方法，使得所有交易在区块中的顺序性，以及通过密码学的方式将他们连接到一起。这种哈希和连接的方式使得账本数据非常安全，因为即使一个节点纂改了账本，而账本是分布在一个非独立节点的网络中，纂改的节点不能通过一种便捷地方法来修改其它节点的账本。&lt;/p&gt;

&lt;p&gt;区块链是使用文件的方式实现的。使用文件方式实现的原因是区块链的两种操作具有十分大的偏差。主要分为两种：（1）插入，而且只在尾部插入，这类操作是十分频繁的。（2）查询，这类操作是十分稀少的，因为世界状态。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blockchain/2021-01-05-Fabric Ledger翻译_个人小结/ledger.diagram.3.png&quot; alt=&quot;ledger.blockchain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从图上可见，以B2区块为例，其区块数据D2包含了3条交易T5、T6、T7。&lt;/p&gt;

&lt;p&gt;B2区块的区块头H2，H2保存了当前区块数据的Hash值和上一个区块的区块头Hash值。通过这种方法，区块间变得密不可分，从而使得区块不能纂改。&lt;/p&gt;

&lt;p&gt;区块链的第一个区块称为创世块。创世块是没有交易的，但它包含了一个名为配置交易的交易。该类型交易用于记录Fabric网络通道的初始状态。我们把这类型的区块称之为配置区块，这里我们不加以讨论。&lt;/p&gt;

&lt;h2 id=&quot;区块&quot;&gt;区块&lt;/h2&gt;

&lt;p&gt;区块的结构分为3部分：&lt;/p&gt;

&lt;p&gt;1.区块头(Block Header)&lt;/p&gt;

&lt;p&gt;Block Number：表示当前区块位于区块链的位置。其中创世块的Number为0，每往后插入一个区块，对应的Number加一。&lt;/p&gt;

&lt;p&gt;Block Hash：表示当前区块的区块体的哈希值。&lt;/p&gt;

&lt;p&gt;Previous Block Hash：表示上一个区块的区块头的哈希值。特别的，创世块的Previous Block Hash为空。&lt;/p&gt;

&lt;p&gt;这些字段通过对区块的内部数据进行哈希而得到的。 以确保每个区块都与相邻区块密不可分，从而导致账本不可纂改。&lt;/p&gt;

&lt;p&gt;2.区块数据(Block Data)&lt;/p&gt;

&lt;p&gt;区块数据包含着一批排序好的交易。这部分数据是在Orderer节点出块的时候产生。这些交易结构虽然很复杂但是却很直观。&lt;/p&gt;

&lt;p&gt;3.区块元数据(Block Metadata)&lt;/p&gt;

&lt;p&gt;区块元数据包含的内容有：（1）区块被写入时的时间；（2）区块写入者的证书、公钥和签名。（3）区块中每个交易的有效性(valid/invalid)标记。其中这部分标记是不包含着block hash里，因为block hash是在区块创建时（orderer节点）就被创建了。交易有效性标记则是在peer节点验证时生成。&lt;/p&gt;

&lt;h2 id=&quot;交易&quot;&gt;交易&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blockchain/2021-01-05-Fabric Ledger翻译_个人小结/ledger.diagram.4.png&quot; alt=&quot;ledger.transaction&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一条交易掌握了世界状态的改变。上图给出了一个交易的数据结构，它主要由五个字段组成：&lt;/p&gt;

&lt;p&gt;1.Header–头部&lt;/p&gt;

&lt;p&gt;Header主要保存了这条交易相关的元数据，比如跟这条交易相关的链码（智能合约）的名称和版本等等。&lt;/p&gt;

&lt;p&gt;2.Signature–签名&lt;/p&gt;

&lt;p&gt;Signature包含了一个由客户端应用产生的数字签名。它的目的是用于检测这条交易的细节没有被修改，数字签名的生成需要客户端应用的私钥。（有关数字签名的作用我就不再赘述，它的作用其实就用于验证）&lt;/p&gt;

&lt;p&gt;3.Proposal–提案&lt;/p&gt;

&lt;p&gt;Proposal是对客户端应用提供给智能合约的输入参数进行编码，这些输入参数用于创建提议的账本更新。 当智能合约运行时，proposal提供了一组输入参数，这些输入参数与当前的世界状态一起确定了新的世界状态。&lt;/p&gt;

&lt;p&gt;4.Response–响应&lt;/p&gt;

&lt;p&gt;Response捕获了交易发生前的世界状态值和交易发生后的世界状态值，我们称之为读写集(RW-set)。Response可以理解为智能合约的输出（就是RW-set），如果这条交易被验证成功了，那么将会把对应的RW-set作用到账本中，用于更新世界状态。&lt;/p&gt;

&lt;p&gt;这部分可以这样理解，一条交易为A给B转账十块，对应的读写集为 [load A，load B，store A A-10，store B B+10]，load为读，store为写。后续这个区块的每条交易都需要验证，就是验证A给B转账十块这条交易是否合法，如果合法了，会把这条交易标记为valid，然后执行读写集[load A，load B，store A A-10，store B B+10]，从而改变世界状态。&lt;/p&gt;

&lt;p&gt;5.Endorserments–背书&lt;/p&gt;

&lt;p&gt;Endorsements就是一个列表，该列表存放了某些组织对当前交易的Response的签名，而这些组织必须是背书规则中所声明的，而且要达到背书规则中指定的数量。&lt;/p&gt;

&lt;p&gt;我们会发现尽管一条交易只包含了一个交易Response，但是它却包含了多条背书。这是因为每条背书实际上是对每个机构的特指交易的Response进行了编码（其实就是说明了这些机构能正确响应这条交易，既认可了这条交易）。这意味着没有必要去包含那些没有满足背书规则（即这条交易没有被足够多的机构所背书）的交易，因为这些交易都没标记为invalid，不会对世界状态进行更新。&lt;/p&gt;

&lt;p&gt;当然交易还有一些别的字段组成，但上面五个字段是必不可少的，我们需要将它们的概念掌握后才能更好进一步分析区块。&lt;/p&gt;

&lt;h2 id=&quot;命名空间&quot;&gt;命名空间&lt;/h2&gt;

&lt;p&gt;即使我们已经将账本呈现为一个单一的世界状态和单个区块链，但这还是有点过于简化了。 实际上，每个链码都有自己的世界状态，该世界状态与所有其他链码是分开的。 世界状态位于命名空间中，因此只有相同链码内的智能合约才能访问给定的命名空间。&lt;/p&gt;

&lt;p&gt;然而区块链是没有命名空间这个概念的，因为它包含了来自不同命名空间的智能合约的交易。&lt;/p&gt;

&lt;h2 id=&quot;通道channels&quot;&gt;通道(Channels)&lt;/h2&gt;

&lt;p&gt;在Fabric中，每个通道都有一个完全分离的账本，这意味着区块链、世界状态和命名空间都是分离的。&lt;/p&gt;

&lt;p&gt;当然，我们可以通过客户端应用和智能合约来实现不同通道间的通信，使得它们的账本信息能够被访问。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;世界状态(World State)&lt;/th&gt;
      &lt;th&gt;区块链(Blockchain)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;实现方式&lt;/td&gt;
      &lt;td&gt;数据库&lt;/td&gt;
      &lt;td&gt;文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;组成元素&lt;/td&gt;
      &lt;td&gt;键值对&lt;/td&gt;
      &lt;td&gt;区块&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;是否为账本中必需的元素&lt;/td&gt;
      &lt;td&gt;否&lt;/td&gt;
      &lt;td&gt;是&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;记录的内容&lt;/td&gt;
      &lt;td&gt;由历史交易引起的值&lt;/td&gt;
      &lt;td&gt;历史交易&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><category term="blockchain" /><category term="Fabric、Ledger、翻译、个人小结" /><summary type="html">参考链接：https://hyperledger-fabric.readthedocs.io/en/release-1.4/ledger/ledger.html</summary></entry><entry><title type="html">吾托帮消息系统传输Java对象_笔记</title><link href="https://userzb.github.io/notes/2021/01/04/%E5%90%BE%E6%89%98%E5%B8%AE%E6%B6%88%E6%81%AF%E7%B3%BB%E7%BB%9F%E4%BC%A0%E8%BE%93Java%E5%AF%B9%E8%B1%A1_%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="吾托帮消息系统传输Java对象_笔记" /><published>2021-01-04T00:00:00+08:00</published><updated>2021-01-04T00:00:00+08:00</updated><id>https://userzb.github.io/notes/2021/01/04/%E5%90%BE%E6%89%98%E5%B8%AE%E6%B6%88%E6%81%AF%E7%B3%BB%E7%BB%9F%E4%BC%A0%E8%BE%93Java%E5%AF%B9%E8%B1%A1_%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="https://userzb.github.io/notes/2021/01/04/%E5%90%BE%E6%89%98%E5%B8%AE%E6%B6%88%E6%81%AF%E7%B3%BB%E7%BB%9F%E4%BC%A0%E8%BE%93Java%E5%AF%B9%E8%B1%A1_%E7%AC%94%E8%AE%B0.html">&lt;h2 id=&quot;背景说明&quot;&gt;背景说明&lt;/h2&gt;

&lt;p&gt;最近，我需要通过吾托帮消息系统来传输Java对象。&lt;/p&gt;

&lt;p&gt;那何为传输Java对象呢？其实就是说传输Java对象要做什么，我的总结是：&lt;/p&gt;

&lt;p&gt;（1）将Java对象序列化为指定类型的消息，并push到吾托帮消息系统中。&lt;/p&gt;

&lt;p&gt;（2）从吾托帮消息系统中pull回指定类型的消息，并反序列化为Java对象。&lt;/p&gt;

&lt;p&gt;吾托帮消息系统的底层是基于RabbitMQ，调用接口是基于Servlet进行再次封装的，传输协议是HTTP，传输的消息类型为字符串。所以问题我们已经明确清楚了，接下来就是编码实现。而实现过程中也发现了很多问题，我把它们一一列出来。&lt;/p&gt;

&lt;h2 id=&quot;存在问题&quot;&gt;存在问题&lt;/h2&gt;

&lt;h3 id=&quot;编码问题&quot;&gt;编码问题&lt;/h3&gt;

&lt;p&gt;因为传输的消息类型为字符串，而序列化后的Java对象为byte[]。所以这里就有一个问题，如何将byte[]转换为String。具体的做法有：&lt;/p&gt;

&lt;p&gt;(1) 基于String的byte[]和String的转换。直接通过new String(byte[])来获取String。然后通过getByte来获取byte[]。&lt;/p&gt;

&lt;p&gt;但是这里有个坑，执行下面的测试代码，我们会发现结果为false。其主要原因是UTF-8的encode和decode会导致结果不一致，我们需要我们要定义ISO-8859-1编码或其它会使结果一致的编码。但因为这些编码会产生一些奇奇怪怪的字符（字符集过多），而这些奇奇怪怪的字符在HTTP请求中可能会存在截断(如’#’)或丢失(如’+’，会被识别为’ ‘)的情况，所以在传输Java对象这种场景中，我们不会使用基于String的方法来实现byte[]和String之间的转换。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;List&amp;lt;Integer&amp;gt; tx = new ArrayList&amp;lt;&amp;gt;();
byte[] byteArray = SerializeUtil.serialize(tx);
byte[] byteArray1 =  new String(byteArray).getBytes();
System.out.println(Arrays.equals(byteArray,byteArray1));

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(2) 基于Base64的byte[]和String的转换。这是业界的普遍做法。&lt;/p&gt;

&lt;p&gt;Base64编码和解码已经在JDK中提供了。其主要分为三类，参考资料[2]：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基础，输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+/。&lt;/li&gt;
  &lt;li&gt;URL，输出映射到一组字符A-Za-z0-9-_，输出是URL和文件。&lt;/li&gt;
  &lt;li&gt;MIME，输出隐射到MIME友好格式。输出每行不超过76字符，并且使用’\r’并跟随’\n’作为分割。编码输出最后没有行分割。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体可参考Base64源码&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * This array is a lookup table that translates 6-bit positive integer
 * index values into their &quot;Base64 Alphabet&quot; equivalents as specified
 * in &quot;Table 1: The Base64 Alphabet&quot; of RFC 2045 (and RFC 4648).
 */
private static final char[] toBase64 = {
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'
};

/**
 * It's the lookup table for &quot;URL and Filename safe Base64&quot; as specified
 * in Table 2 of the RFC 4648, with the '+' and '/' changed to '-' and
 * '_'. This table is used when BASE64_URL is specified.
 */
private static final char[] toBase64URL = {
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为传输协议是基于HTTP的，基础Base64存在+等字符，’+’在请求时会被识别为’ ‘字符，所以这里我们的选型为URL的Base64编码。&lt;/p&gt;

&lt;p&gt;使用方法&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String message = &quot;&quot;;
byte[] byteArray = new byte[0];;

Base64.Encoder urlEncoder = Base64.getUrlEncoder();
message = urlEncoder.encodeToString(byteArray);

Base64.Decoder urlDecoder = Base64.getUrlDecoder();
byteArray = urlDecoder.decode(message);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;序列化后的对象太大&quot;&gt;序列化后的对象太大&lt;/h3&gt;

&lt;p&gt;调用接口时，报了以下错误。其实问题很快就能定位到，其根本原因是GET请求的长度有限，当然我们也可以通过压缩的方法来实现基于GET请求的传输。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;head&amp;gt;
	&amp;lt;title&amp;gt;414 Request-URI Too Large&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
	&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;414 Request-URI Too Large&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;&amp;lt;hr&amp;gt;
	&amp;lt;center&amp;gt;nginx&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;p&gt;(1) 将GET请求转换为POST请求，并将传入的参数从URL移到 form中。由于项目中使用的是RestTemplate，所以具体做法参考[1]。&lt;/p&gt;

&lt;p&gt;(2) 在序列化的时候，使用GZIPOutputStream和GZIPInputStream来压缩。其具体实现见下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static byte[] serialize(Object obj) throws IOException {
    try(
        ByteArrayOutputStream byteArrayOut = new ByteArrayOutputStream();
        //1.define the GZIPOutputStream
        GZIPOutputStream gzout = new GZIPOutputStream(byteArrayOut,true);
        ObjectOutputStream out = new ObjectOutputStream(gzout);
    ){
        out.writeObject(obj);
        out.flush();//2.flush
        result = byteArrayOut.toByteArray();
	}
	return result;
}
	
public static Object deserialize(byte[] byteArray) throws ClassNotFoundException, IOException {
    Object result = null;
    try(
        ByteArrayInputStream byteArrayIn = new ByteArrayInputStream(byteArray);
        //3.define the GZIPInputStream
        GZIPInputStream gzin = new GZIPInputStream(byteArrayIn,byteArray.length);
        ObjectInputStream in = new ObjectInputStream(gzin);
    ){
    	result = in.readObject();
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;注意&quot;&gt;注意&lt;/h2&gt;

&lt;p&gt;(1) FastJson JSONObject的toString()方法，会将byte[]类型转换为Base64编码(注意是标准的)，所以’+’还需要自己二次编码。&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;

&lt;p&gt;[1] RestTemplate提交表单数据的三种方法 https://blog.csdn.net/yiifaa/article/details/77939282&lt;/p&gt;

&lt;p&gt;[2] Java Base64 https://www.runoob.com/java/java8-base64.html&lt;/p&gt;

&lt;p&gt;[3] Base64编码详解及其变种(解决加号在URL变空格问题） https://www.cnblogs.com/lifesting/archive/2012/07/12/2587923.html&lt;/p&gt;</content><author><name></name></author><category term="notes" /><category term="消息系统、对象传输" /><summary type="html">背景说明</summary></entry></feed>