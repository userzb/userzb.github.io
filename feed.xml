<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://userzb.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://userzb.github.io/" rel="alternate" type="text/html" /><updated>2021-01-04T16:39:38+08:00</updated><id>https://userzb.github.io/feed.xml</id><title type="html">userzb’s blog</title><subtitle>记录、分享。</subtitle><entry><title type="html">吾托帮消息系统传输Java对象_笔记</title><link href="https://userzb.github.io/notes/2021/01/04/%E5%90%BE%E6%89%98%E5%B8%AE%E6%B6%88%E6%81%AF%E7%B3%BB%E7%BB%9F%E4%BC%A0%E8%BE%93Java%E5%AF%B9%E8%B1%A1_%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="吾托帮消息系统传输Java对象_笔记" /><published>2021-01-04T00:00:00+08:00</published><updated>2021-01-04T00:00:00+08:00</updated><id>https://userzb.github.io/notes/2021/01/04/%E5%90%BE%E6%89%98%E5%B8%AE%E6%B6%88%E6%81%AF%E7%B3%BB%E7%BB%9F%E4%BC%A0%E8%BE%93Java%E5%AF%B9%E8%B1%A1_%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="https://userzb.github.io/notes/2021/01/04/%E5%90%BE%E6%89%98%E5%B8%AE%E6%B6%88%E6%81%AF%E7%B3%BB%E7%BB%9F%E4%BC%A0%E8%BE%93Java%E5%AF%B9%E8%B1%A1_%E7%AC%94%E8%AE%B0.html">&lt;h2 id=&quot;背景说明&quot;&gt;背景说明&lt;/h2&gt;

&lt;p&gt;最近，我需要通过吾托帮消息系统来传输Java对象。&lt;/p&gt;

&lt;p&gt;那何为传输Java对象呢？其实就是说传输Java对象要做什么，我的总结是：&lt;/p&gt;

&lt;p&gt;（1）将Java对象序列化为指定类型的消息，并push到吾托帮消息系统中。&lt;/p&gt;

&lt;p&gt;（2）从吾托帮消息系统中pull回指定类型的消息，并反序列化为Java对象。&lt;/p&gt;

&lt;p&gt;吾托帮消息系统的底层是基于RabbitMQ，调用接口是基于Servlet进行再次封装的，传输协议是HTTP，传输的消息类型为字符串。所以问题我们已经明确清楚了，接下来就是编码实现。而实现过程中也发现了很多问题，我把它们一一列出来。&lt;/p&gt;

&lt;h2 id=&quot;存在问题&quot;&gt;存在问题&lt;/h2&gt;

&lt;h3 id=&quot;编码问题&quot;&gt;编码问题&lt;/h3&gt;

&lt;p&gt;因为传输的消息类型为字符串，而序列化后的Java对象为byte[]。所以这里就有一个问题，如何将byte[]转换为String。具体的做法有：&lt;/p&gt;

&lt;p&gt;(1) 基于String的byte[]和String的转换。直接通过new String(byte[])来获取String。然后通过getByte来获取byte[]。&lt;/p&gt;

&lt;p&gt;但是这里有个坑，执行下面的测试代码，我们会发现结果为false。其主要原因是UTF-8的encode和decode会导致结果不一致，我们需要我们要定义ISO-8859-1编码或其它会使结果一致的编码。但因为这些编码会产生一些奇奇怪怪的字符（字符集过多），而这些奇奇怪怪的字符在HTTP请求中可能会存在截断(如’#’)或丢失(如’+’，会被识别为’ ‘)的情况，所以在传输Java对象这种场景中，我们不会使用基于String的方法来实现byte[]和String之间的转换。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;List&amp;lt;Integer&amp;gt; tx = new ArrayList&amp;lt;&amp;gt;();
byte[] byteArray = SerializeUtil.serialize(tx);
byte[] byteArray1 =  new String(byteArray).getBytes();
System.out.println(Arrays.equals(byteArray,byteArray1));

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(2) 基于Base64的byte[]和String的转换。这是业界的普遍做法。&lt;/p&gt;

&lt;p&gt;Base64编码和解码已经在JDK中提供了。其主要分为三类，参考资料[2]：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基础，输出被映射到一组字符A-Za-z0-9+/，编码不添加任何行标，输出的解码仅支持A-Za-z0-9+/。&lt;/li&gt;
  &lt;li&gt;URL，输出映射到一组字符A-Za-z0-9-_，输出是URL和文件。&lt;/li&gt;
  &lt;li&gt;MIME，输出隐射到MIME友好格式。输出每行不超过76字符，并且使用’\r’并跟随’\n’作为分割。编码输出最后没有行分割。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体可参考Base64源码&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/**
 * This array is a lookup table that translates 6-bit positive integer
 * index values into their &quot;Base64 Alphabet&quot; equivalents as specified
 * in &quot;Table 1: The Base64 Alphabet&quot; of RFC 2045 (and RFC 4648).
 */
private static final char[] toBase64 = {
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'
};

/**
 * It's the lookup table for &quot;URL and Filename safe Base64&quot; as specified
 * in Table 2 of the RFC 4648, with the '+' and '/' changed to '-' and
 * '_'. This table is used when BASE64_URL is specified.
 */
private static final char[] toBase64URL = {
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_'
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;因为传输协议是基于HTTP的，基础Base64存在+等字符，’+’在请求时会被识别为’ ‘字符，所以这里我们的选型为URL的Base64编码。&lt;/p&gt;

&lt;p&gt;使用方法&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String message = &quot;&quot;;
byte[] byteArray = new byte[0];;

Base64.Encoder urlEncoder = Base64.getUrlEncoder();
message = urlEncoder.encodeToString(byteArray);

Base64.Decoder urlDecoder = Base64.getUrlDecoder();
byteArray = urlDecoder.decode(message);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;序列化后的对象太大&quot;&gt;序列化后的对象太大&lt;/h3&gt;

&lt;p&gt;调用接口时，报了以下错误。其实问题很快就能定位到，其根本原因是GET请求的长度有限，当然我们也可以通过压缩的方法来实现基于GET请求的传输。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;head&amp;gt;
	&amp;lt;title&amp;gt;414 Request-URI Too Large&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
	&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;414 Request-URI Too Large&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;&amp;lt;hr&amp;gt;
	&amp;lt;center&amp;gt;nginx&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;p&gt;(1) 将GET请求转换为POST请求，并将传入的参数从URL移到 form中。由于项目中使用的是RestTemplate，所以具体做法参考[1]。&lt;/p&gt;

&lt;p&gt;(2) 在序列化的时候，使用GZIPOutputStream和GZIPInputStream来压缩。其具体实现见下：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static byte[] serialize(Object obj) throws IOException {
    try(
        ByteArrayOutputStream byteArrayOut = new ByteArrayOutputStream();
        //1.define the GZIPOutputStream
        GZIPOutputStream gzout = new GZIPOutputStream(byteArrayOut,true);
        ObjectOutputStream out = new ObjectOutputStream(gzout);
    ){
        out.writeObject(obj);
        out.flush();//2.flush
        result = byteArrayOut.toByteArray();
	}
	return result;
}
	
public static Object deserialize(byte[] byteArray) throws ClassNotFoundException, IOException {
    Object result = null;
    try(
        ByteArrayInputStream byteArrayIn = new ByteArrayInputStream(byteArray);
        //3.define the GZIPInputStream
        GZIPInputStream gzin = new GZIPInputStream(byteArrayIn,byteArray.length);
        ObjectInputStream in = new ObjectInputStream(gzin);
    ){
    	result = in.readObject();
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;注意&quot;&gt;注意&lt;/h2&gt;

&lt;p&gt;(1) FastJson JSONObject的toString()方法，会将byte[]类型转换为Base64编码(注意是标准的)，所以’+’还需要自己二次编码。&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;

&lt;p&gt;[1] RestTemplate提交表单数据的三种方法 https://blog.csdn.net/yiifaa/article/details/77939282&lt;/p&gt;

&lt;p&gt;[2] Java Base64 https://www.runoob.com/java/java8-base64.html&lt;/p&gt;

&lt;p&gt;[3] Base64编码详解及其变种(解决加号在URL变空格问题） https://www.cnblogs.com/lifesting/archive/2012/07/12/2587923.html&lt;/p&gt;</content><author><name></name></author><category term="notes" /><category term="消息系统、对象传输" /><summary type="html">背景说明</summary></entry></feed>